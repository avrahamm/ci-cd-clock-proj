pipeline {
    agent any
    environment {
        // Set from the global environment variable
        // to extract environment variables.
        JENKINS_ENV_FILE_PATH = "${env.JENKINS_ENV_FILE_PATH}"
    }

    stages {
        stage('Load Jenkins Environment Variables') {
            steps {
                script {
                    try {
                        def envFilePath = env.JENKINS_ENV_FILE_PATH
                        def props = readProperties file: envFilePath
                        env.DOCKER_HUB_CREDENTIALS_ID = props.DOCKER_HUB_CREDENTIALS_ID
                        env.CLOCK_PROJ_GIT_REPO_URL = props.CLOCK_PROJ_GIT_REPO_URL
                        env.CLOCK_PROJ_DOCKER_ENV_FILE_PATH = props.CLOCK_PROJ_DOCKER_ENV_FILE_PATH
                        env.CLOCK_PROJ_AWS_ENV_FILE_PATH = props.CLOCK_PROJ_AWS_ENV_FILE_PATH
                        env.GIT_CREDENTIALS_ID = props.GIT_CREDENTIALS_ID
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Failed stage('Load Jenkins Environment Variables'): ${e.message}")
                    }
                }
            }
        }

        stage('Load Docker Environment Variables') {
            steps {
                script {
                    try {
                        def dockerEnvProps = readProperties file: env.CLOCK_PROJ_DOCKER_ENV_FILE_PATH
                        env.CHROME_VERSION = dockerEnvProps.CHROME_VERSION
                        env.CHROME_DRIVER_VERSION = dockerEnvProps.CHROME_DRIVER_VERSION
                        env.CHROME_DRIVER_PATH = dockerEnvProps.CHROME_DRIVER_PATH
                        env.PYTHONPATH = dockerEnvProps.PYTHONPATH
                        env.SELENIUM_HEADLESS_MODE_DISPLAY_PORT = dockerEnvProps.SELENIUM_HEADLESS_MODE_DISPLAY_PORT
                        env.CONTAINER_APP_PORT = dockerEnvProps.CONTAINER_APP_PORT
                        env.PUBLISHED_TEST_APP_PORT = dockerEnvProps.PUBLISHED_TEST_APP_PORT
                        env.PUBLISHED_PROD_APP_PORT = dockerEnvProps.PUBLISHED_PROD_APP_PORT
                        env.IMAGE_NAME = dockerEnvProps.IMAGE_NAME
                        env.WORKDIR = dockerEnvProps.WORKDIR

                        env.UPDATE_CLOCK_TIME_INTERVAL = dockerEnvProps.UPDATE_CLOCK_TIME_INTERVAL
                        env.CLOCK_APP_URL = dockerEnvProps.CLOCK_APP_URL
                        env.REFRESH_INTERVAL = dockerEnvProps.REFRESH_INTERVAL
                        env.TIME_FORMAT = dockerEnvProps.TIME_FORMAT
                        env.TEST_OUTPUT_FILE_PATH = dockerEnvProps.TEST_OUTPUT_FILE_PATH
                        env.PROD_OUTPUT_FILE_PATH = dockerEnvProps.PROD_OUTPUT_FILE_PATH
                        env.TEST_CONTAINER_NAME = dockerEnvProps.TEST_CONTAINER_NAME
                        env.PROD_CONTAINER_NAME = dockerEnvProps.PROD_CONTAINER_NAME
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Failed stage('Load Docker Environment Variables'): ${e.message}")
                    }
                }
            }
        }

        stage('Load AWS Environment Variables') {
            steps {
                script {
                    try {
                        def awsEnvProps = readProperties file: env.CLOCK_PROJ_AWS_ENV_FILE_PATH
                        env.AWS_CREDENTIALS_ID = awsEnvProps.AWS_CREDENTIALS_ID
                        env.AWS_REGION = awsEnvProps.AWS_REGION
                        env.EC2_IP = awsEnvProps.EC2_IP
                        env.AWS_PROD_PORT = awsEnvProps.AWS_PROD_PORT
                        env.EC2_USER = awsEnvProps.EC2_USER
                        env.SSH_KEY_ID = awsEnvProps.SSH_KEY_ID

                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Failed stage('Load AWS Environment Variables'): ${e.message}")
                    }
                }
            }
        }


        stage('Deploy and Test on EC2') {
            steps {
                script {
                    withCredentials([
                        usernamePassword(credentialsId: env.GIT_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD'),
                        usernamePassword(credentialsId: env.DOCKER_HUB_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')
                    ]) {
                        withAWS(credentials: env.AWS_CREDENTIALS_ID, region: env.AWS_REGION) {
                            sshagent(credentials: [env.SSH_KEY_ID]) {
                                sh """
                                    ssh -o StrictHostKeyChecking=no ${env.EC2_USER}@${env.EC2_IP} << 'EOT'
        set -ex
        # Export credentials as environment variables
        export GIT_USERNAME='${GIT_USERNAME}'
        export GIT_PASSWORD='${GIT_PASSWORD}'
        export DOCKER_USERNAME='${DOCKER_USERNAME}'
        export DOCKER_PASSWORD='${DOCKER_PASSWORD}'

        # Clone Git repo using credentials
        rm -rf clock-project || true
        git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@${env.CLOCK_PROJ_GIT_REPO_URL.replace('https://', '')} clock-project
        cd clock-project

        # Set GIT_COMMIT_SHORT (with error checking)
        GIT_COMMIT_SHORT=\$(git rev-parse --short HEAD)
        echo "GIT_COMMIT_SHORT = \${GIT_COMMIT_SHORT}"

        # Login to Docker Hub
        echo \${DOCKER_PASSWORD} | docker login -u \${DOCKER_USERNAME} --password-stdin

        # Tester stage
        docker build --target tester -t ${env.IMAGE_NAME}:test-\${GIT_COMMIT_SHORT} .
        docker run --rm \\
            -d --name ${env.TEST_CONTAINER_NAME} \\
            -e WORKDIR=${env.WORKDIR} \\
            -e CONTAINER_APP_PORT=${env.CONTAINER_APP_PORT} \\
            -e CHROME_DRIVER_VERSION=${env.CHROME_DRIVER_VERSION} \\
            -e OUTPUT_FILE_PATH=${env.TEST_OUTPUT_FILE_PATH} \\
            -p ${env.PUBLISHED_TEST_APP_PORT}:${env.CONTAINER_APP_PORT} \\
            ${env.IMAGE_NAME}:test-\${GIT_COMMIT_SHORT}

        # Verify Production Image
        docker build --target production -t ${env.IMAGE_NAME}:production-\${GIT_COMMIT_SHORT} .
        docker run --rm \\
            -d --name ${env.PROD_CONTAINER_NAME} \\
            -e WORKDIR=${env.WORKDIR} \\
            -e CONTAINER_APP_PORT=${env.CONTAINER_APP_PORT} \\
            -e CHROME_DRIVER_VERSION=${env.CHROME_DRIVER_VERSION} \\
            -e OUTPUT_FILE_PATH=${env.PROD_OUTPUT_FILE_PATH} \\
            -p ${env.AWS_PROD_PORT}:${env.CONTAINER_APP_PORT} \\
            ${env.IMAGE_NAME}:production-\${GIT_COMMIT_SHORT}

        sleep 10

        # List Docker images for verification
        # echo "Docker images:"
        # docker images

        # Logout from Docker Hub
        docker logout

        # Clear sensitive environment variables
        unset GIT_USERNAME GIT_PASSWORD DOCKER_USERNAME DOCKER_PASSWORD
EOT
                                """
                            }
                        }
                    }
                }
            }
        }


        stage('Health Check on EC2') {
            steps {
                script {
                    try {
                        def response = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://${env.EC2_IP}:${env.AWS_PROD_PORT}", returnStdout: true).trim()
                        if (response == "200") {
                            echo "Application is up and running on EC2!"
                        } else {
                            error "Application health check failed on EC2. HTTP response: ${response}"
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Failed on stage('Health Check on EC2'): ${e.message}"
                    }
                }
            }
        }


    }


    post {
            success {
                echo 'Deployment successful!'
                // Add notification here, e.g., Slack or email
            }
            failure {
                echo 'Deployment failed!'
                // Add notification here, e.g., Slack or email
            }
            always {
               sh 'docker logout'
            }
        }
}

